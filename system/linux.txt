[기본적인 리눅스 명령어]
cd : 디렉토리 이동
pwd : 현재 디렉토리 출력
mkdir : 디렉토리 생성
rmdir : 디렉토리 제거

cp : 파일 복사 (cp file1 file2 : file1을 file2라는 이름으로 복사
rm : 파일 제거
mv : 파일의 디렉토리 이동이 아닐경우 파일의 이름변경하는 용도
(mv file1 file2 : file1의 이름을 file2로 바꿈)
cat : 파일의 내용을 보여줌

[리눅스에서 정보 얻는 방법]
w : 현재 접속자를 알려줌
tty는 콘솔접속, pts는 터미널 접속, pts/0 pts/1 pts/2는 접속순서
접속한 사람들의 ip(콘솔로 접속한 경우 ip가 나타나지 않음), 접속한 시간
사용자가 얼마나 접속을 안하고 쉬고있는지 시간나타냄 + cpu 지연시간
WHAT필드의 명령어가 지연된 시간, 사용자들이 현재 사용중인 명령어 보여줌

finger -l : 해당 사용자의 많은 정보를 볼 수 있음
tty : 자신의 터미널 정보를 확인함
ifconfig : 현재 서버의 ip정보를 볼 수 있음

write ID /dev/pts/pts번호 : 다른 사용자에게 쪽지를 보냄
ctrl + d 종료
wall test : 접속중인 모든 사용자에게 쪽지를 보냄

whoami < id (둘 다 사용자 정보지만 정보의 양 차이)
uname -a : 현재 서버의 커널버전
cat /etc/*release : 서버에 설치된 OS 버전확인
rpm -qa : 직접 패키지의 정보를 가져옴
cat /proc/cpuinfo : 서버의 cpu 정보수집

cat /etc/passwd : 뭔가 많이 나온다.
root:x:0:0:Admin:/root:/bin/bash
서버에 로그인할 때 사용되는 아이디:패스워드(가 나타났었지만 보안의 이유로
/etc/shadow라는 파일로 넘기고 이자리에는 x만 들어옴):사용자를 10진수로 정의:
사용자의 그룹을 10진수로 정의:사용자의 이름을 말해줌:해당 사용자가 로그인에
성공했을 때 위치하게 되는 디렉토리:처음 로그인했을 때 실해오디게 할 프로그램

[파일 압축(백업)] (※ zipName = 합치거나 압축한 파일)
tar : 파일합치기  (파일 백업프로그램으로는 속도가 매우 빠르나 파일 압축하는 프로그램이 아님)
option : (c : 새로운 파일 생성), ( x : 합친 파일 해제), (v : 합지고, 해제하는 과정 로그출력), (f : 파일로서 백업)
tar cvf (zipName) (files) : 파일 합치기
tar xvf (zipName) : 파일 해제

gzip : 한번에 하나의 파일 압축
gzip (zipName) : 파일 압축
gzip -d (zipName) :  파일 압축풀기

[프로그램 작성, 컴파일]
확장자 : (tar : tar 프로그램을 이용하여 합친 파일), (gz : gzip 프로그램을 이용하여
압축된 파일), (tar.gz : tar로 파일을 합친 뒤 gzip으로 압축한 파일), (tgz : tar.gz)

cat > filename.txt : filename이라는 파일을 생성 + 내용 작성
cat >> filename.txt : filename이라는 파일에 내용을 추가
cat > program.c (대충 코드 내용) 작성 후 gcc를 이용하여 컴파일

[리눅스 사용자(권한)]
사용자의 종류 : (유저 : 자기 자신), (그룹 : 모든 유저는 하나 이상의 그룹에 속함(임의로
그룹을 변경하지 않은 경우 자신은 유저네임이 그룹이름으로 설정)),
(아더 : 유저와 그룹을 제외한 모든 다른 사람), (루트 : 절대적인 권한을 가진 사용자, 권한에
구애 받지않고 파일 제어)
id : 사용자의 정보; (uid : USER ID의 약자; gid : Group ID의 약자(특별한 경우가 아니면 uid와 동일);
groups : 현재 자신이 속해 있는 그룹을 말함(임의로 변경하지 않았으면 uid와 같은 그룹))
/ - / rwx / rwx / rwx / 1 / uid / gid /
/ 파일 / 유저권한 / 그룹권한 / 아더권한 /  / 유저 아이디 / 그룹 아이디 /
r : read, w : write, x : execute, s : SetUID

Remote 해킹 : 서버에 아이디가 없을 때 아이디를 얻고자 시도하는 것
>무작위 아이디, 비밀번호 | 데몬의 취약점 공격 | 게시판, 방명록 이용 등등
Local 해킹 : 해킹하려는 서버의 일반 계정을 가지고 있을 때 root 권한을 얻고자 시도하는 것
>SetUID를 이용해 일시적으로 자신의 uid를 변경
shadow 파일은 기본적으로 루트계정만이 제어할 수 있는데 일반 사용자가 접근 가능한 이유는
passwd 파일에 루트 권한의 SetUID가 걸려 있어 passwd 파일 실행동안 루트로서 일시적인
아이디 변경이 가능
기법 : 레이스 컨디션, IFS버그, 링크버그, 버퍼오버플로우, 포맷 스티링 어택(Local Exploit)

[버퍼 오버 플로우(C언어 필수)]
joe라는 파일이 있는데 joe filename을 써서 filename의 내용을 편집하면 1000자가 넘어갔을 때 프로그램이
제대로 실해오디지 않는데 이를 이용하여 /bin/bash 파일을 실행하게 하고 joe가 실행되는 동안 루트권한을 얻는데
제대로 종료되지 않으니 /bin/bash로 이동해도 루트 권한이 남아있게 된다.

find  (-perm : 권한과 일치하는 파일을 찾음), (-name : 이름과 일치하는 파일 찾음), 
(-user : 유저와 일치하는 파일을 찾음), (-group : 그룹과 일치하는 파일을 찾음)
find / [-perm, -name, -user, -group] (-)srwx (2>/dev/null :  Standard Error 삭제)
