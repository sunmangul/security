[메모리]
유저 영역 : 하나의 프로세스는 코드 영역,  데이터 영역, 힙 영역, 스택 영역에 나뉘어 할당
커널 영역 : 시스템 운영에 필요한 메모리 ( 운영체제 포함 ) -> 사용자는 함부로 커널에 접근(X)
┌───────────────┬─────────────────────────────┐
│     adress    │           memory            │
├───────────────┼─────────────────────────────┤
|   0x00000000  |     코드 자체(코드 영역)    │
|   0x3FFFFFFF  |    전역 변수(데이터 영역)   │        #유저 영역 (3GB)
|   0x7FFFFFFF  |      동적 할당(힙 영역)     │
|   0xBFFFFFFF  |     지역 변수(스택 영역)    │
├───────────────┼─────────────────────────────┤
|   0xFFFFFFFF  |            커 널            │        #커널 영역 (1GB)
└───────────────┴─────────────────────────────┘
4GB = 4 * 2^10MB
= (4 * 2^10MB) * (2^10) = 4 * 2^20KB
= (4 * 2^20KB) * 2^10
= 4 * 2^30Byte
= 2^32Byte
4,294,967,296Byte

1TB = 1024GB = 1024^2MB = 1024^3KB = 1024^4Byte = (1024^4 * 8)bit
1024 = 2^10

4GB는 2^32개의 주소를 가짐
32bit는 2^32개의 숫자를 표현 가능
32bit = 2^32

유저와 커널 영역을 나누는 이유는 유저가 커널에 올라온 운영체제에
접근하면 시스템이 안정적으로 운요오딜 수 없고 나누는 크기는 운영체제에 따라 달라지는데
설정에 맞춰 영역의 크기를 조정 가능

[코드 영역]
메모리에 코드(저급어)가 올라옴 주소는 대부분 32bit 시스템에선 0804~로 시작하고, 메모리에
코드가 올라갈 때 보통 이 영역에 올라 옴
[데이터 영역]
전역 변수가 로드되는 영역(항상 동일한 메모리)
사용자가 입력하는 값이 전역변수로 정의되어있을 때 고정된 메모리 주소에 원하는
값을 입력 가능
[힙 영역]
동적으로 메모리를 할당하영 사용하는 공간으로 메모리 할당 함수로 malloc이 대표적
malloc으로 필요한 공간을 할당하면 힙 영역을 사용하는데 필요 없어지면 해제
(힙 영역에 값을 많이 뿌려놓고 free해준 후 공간을 재사용하면서 익스플로잇에 활용 )
>>UAF exploit
[스택 영역]
유저영역 메모리의 가장 바닥부터 채워지는 영역으로 함수인자나 지역변수들이 올라온다.
스택 영역이 밑에서부터 채워지는 이유는 스택이 계속 쌓이다 커널 부분을 건드릴 수 있기 때문에
사전에 방지하기 위해 끝에서 부터 채워진다고 보면 됨(보통 0xbfffffff의 주소를 가지는 이유)

힙과 스택 영역은 고정 된 메모리에 올라오는 것이 아니라 쉘 따기가 힘듦