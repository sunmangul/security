단방향 암호화 방식 : MD5, SHA
무결성을 위함

양방향 암호화 방식 {대칭키 방식(AES, Twofish), 비대칭키 방식(RSA)
기밀성을 위함

HASH : 암호화는 가능하나 복호화는 불가능함(무결성을 위함)
ex) earth -> sha256 algorithm -> 7B74B418A352D67108173C20C1B16B4B726BAD8606BE65711FF924DBF9A40670
사용하는 곳 : 파일 설치 후 파일을 제공한 사이트에 있는 해쉬코드와
http://emn178.github.io/online-tools/md5_checksum.html 여기에 파일을
올린후에 나오는 해쉬코드를 비교 후 안전한 파일인지 확인 할 수 있다!
무결성, 전자서명, 파일식별자, 비밀번호 서버에 저장, 블록체인(작업증명)
HASH algorithm : CRC, MD5, RIPEMD160, SHA-1, SHA-256, SHA-512

대칭키 암호화 방식 : 하나의 키 값을 가지고 암호화 복호화 모두 가능
평문 -(키)-> 암호화 알고리즘 -> 암호문
암호문 -(키)-> 암호화 알고리즘 -> 평문
대칭키 알고리즘 : Twofish, Serpent, Rijndael, Blowfish, CAST5, Kuznyechik, RC4,
DES, 3DES, Skipjack, Safer+/++(Bluetooth), IDEA, AES

비대칭키(공개키) 암호화 방식 : 두개의 키 값이 있어서 암호화와 복호화 키가 서로 다름
평문 -(공개키)-> 암호화 알고리즘 -> 암호문
암호문 -(비공개키)-> 암호화 알고리즘 -> 평문 OR
평문 -(비공개키)-> 암호화 알고리즘 -> 암호문
암호문 -(공개키)-> 암호화 알고리즘 -> 평문
( public key ) + ( private key ) = ( key pair )
인터넷에서 대칭키 방식의 경우 다른 사람에게 넘겨주는 과정중에 탈취 당할 수 있다.
=>원하지 않는 사람에게 노출되어 보안에 위험이 있음
공개키를 아무곳에 올림(크래커와 정보 제공자가 받음) 그리고 암호화 된 정보가
인터넷에 올라감 -> 정보를 받는 사람은 개인이 가지고 있는 비공개키로 복호화함
=>공개키로 복호화가 되지 않아 비공개키가 노출되지 않는 이상 정보탈취가 불가능함
비대칭키 알고리즘 : RSA

비대칭키 - 서명
공개키를 먼저 올리고, 비공개키를 이용해 평문을 암호화하고 암호환 된 평문을 원래의 평문
뒤에 붙이고, 공개한다. 그럼 공개된 평문과 공개키를 이용해 평문뒤의 암호화 된 평문을 복호화
하고, 복호화 된 평문과 공개된 내용이 같다면 공개키에 맞는 비공개키를 가지고 있음을
확신할 수 있음
-> 크래커가 자신의 비공개키로 암호화해서 정보전달을하면, 공개된 공개키로 복호화가 안되거나
잘못된 평문이 나오기 때문에 크래커가 보낸것을 확신할 수 있음.
